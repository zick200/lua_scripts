term.clear()
term.setCursorPos(1,1)

local tArg = {...}
local length = tonumber(tArg[1]);

assert(type(length)=="number" or type(height)=="number","Require [length]")

 

print "Starting program"

function placeBlock()
 if not turtle.detectDown() then  
    for slt = 1,16 do 
      if turtle.getItemCount(slt)>0 then 
        turtle.select(slt)
        if turtle.placeDown ()then 
        break
        end
      end
    end
   turtle.select(1)
  end 
end 

function refuel()
 if turtle.getFuelLevel() < 10 then 
   if turtle.getItemCount(16) >0 then  
      turtle.select(16)
      local refuel = turtle.refuel(2)
      turtle.select(1)
      return refuel
   end 
      return false
 else return true 
 end  
end

local m = 0
function mined (rtn)
 if rtn ~= "return" then 
   m  = m + 1
   else return m
 end
end

function up()
  while refuel() and not turtle.up() do 
   if turtle.digUp() then mined() end
    end
end


function down() 
  while refuel() and not turtle.down() do 
   if turtle.digDown() then mined() end
  end
end

function fd()
  while refuel() and not turtle.forward() do
   if turtle.dig()   then mined() end
  end
end

function dig(side)
local side = side or ""
assert(side=="Up" or side =="Down" or side=="","dig require side 'Up' 'Down'")
  while turtle["detect"..side]() do 
     if turtle["dig"..side]()  then mined() end
  end
end

function move()
fd()
dig("Up")
end

function layer ()

turtle.turnRight()
   placeBlock()
    dig() 
    up()
    dig()
    turtle.turnLeft();turtle.turnLeft()
    dig()
    down()
    dig()
    turtle.turnRight() 
end 
local tr1 = 0
function annonce (proc)
 tr1 = tr1 + 1
 if tr1 >= 7 then 
  print ("Mined "..mined("return").." block's, "..math.floor(proc/length*100).."%")
  tr1 = 0
 end
end

for exec = 1, length do 
  annonce(exec)
  layer()
  if length > exec then move() end
end
term.clear()
term.setCursorPos(1,1)
print "Program complete!"
print ("Mined "..mined("return").." block's")


