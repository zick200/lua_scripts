local xSize,zSize = term.getSize()
local function resetScreen(  )
  local xPos,zPos = term.getCursorPos()
  if  zPos>=zSize then term.clear(); term.setCursorPos(1,1) end 
end
 

 function getNInput(  txt,history,command )
          resetScreen(  )
          say.writeAlert (""..txt.." # ")
           local tb -- select table is not created 
          local xPos,zPos = term.getCursorPos()
           if type(history)~="table" then  tb = {history} else tb = history end 
              local  n = tonumber(read(nil,tb))
                while n == nil do
                     term.setCursorPos (1,zPos)
                     term.clearLine()
                     say.writeAlert (""..txt.." # ")
                n = tonumber(read(nil,tb))

  		end
                  if command == "clearInput" then 
                          term.setCursorPos (1,zPos)
                          term.clearLine()
                          say.alert (""..txt.." # ")
                    end     
               return n,xPos,zPos
  end

  function getSInput(  txt,history,command )
          resetScreen(  )
          say.writeAlert (""..txt.." % ")
           local tb -- select table is not created 
          local xPos,zPos = term.getCursorPos()
           if type(history)~="table" then  tb = {history} else tb = history end 
              local  n = tostring(read(nil,tb))
                while #n==0 do
                    term.setCursorPos (1,zPos)
                     term.clearLine()
                    say.writeAlert (""..txt.." % ")
                    n = tostring(read(nil,tb))

      end               if command == "clearInput" then 
                          term.setCursorPos (1,zPos)
                          term.clearLine()
                          say.alert (""..txt.." % ")
                        end  
               return n,xPos,zPos
  end



function acceptedUser( text )
  resetScreen(  )
  local xPos,zPos = term.getCursorPos()
    local text = type(text)=="string" and (text.." y/n # ") or "Are you shure y/n # "
    say.writeQuestion (text)
    local input  = read (nil,{"y","n"})
  
  if input == "y" or input == "Y" then   
        term.setCursorPos (1,zPos)
        term.clearLine()
        say.writeQuestion (text)
        term.setCursorPos (#text,zPos)
        term.write (string.rep(" ",(xSize-#text)>0 and (xSize-#text) or  0) )
        term.setCursorPos (#text,zPos)
        say.success (" y")

    return true 
    else 
        term.setCursorPos (1,zPos)
        term.clearLine()
        say.writeQuestion (text)
        term.setCursorPos (#text,zPos)
        term.write (string.rep(" ",(xSize-#text)>0 and (xSize-#text) or  0) ) -- java lan error
        term.setCursorPos (#text,zPos)
        say.danger (" n")
      return false 
  end     
end

function NumberElipse( start, ends  )
  assert (type(start)=="number" and type(ends)=="number","NumberElipse expected number")
  local cnt = 1
  local tb = {}
  if ends >= start then 
      for i=start,ends do
        tb[cnt]=tostring(i)
        cnt=cnt+1
      end
  else 
    for i=start,ends,-1 do
        tb[cnt]=tostring(i)
        cnt=cnt+1
      end
  end 
  return tb 
end
