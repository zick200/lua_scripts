local tArgs = { ... }
if #tArgs < 1 then
	print( "Usage: go <direction> <distance>" )
	return
end

-- Always run method when  selected event keys not triger
function waitMehtod( tbEvents,... )
	assert (type (tbEvents)=="table","Expected table with event keys.")
	assert (type (arg)=="table" and #arg~=0,"Expected arguments with function.")
local exec = true      
function running( )
	while exec do 
		for selected=1,#arg do
			if type (arg[selected])=='function' then
			exec = arg[selected]()-- break if function return false or nil
			end 
		end
		sleep(0)
	end 	
end

 local function event ()  
	while exec do 	
    local par = {os.pullEvent()}
		for _,key in pairs(tbEvents) do
			-- print ( tostring(keys[key]).. " == ",par[2])
			if keys[key] == par[2] then 
				exec = false
			end 	
		end
	 end 
   end 
	parallel.waitForAny (event,running)
end


local tHandlers = {
	["fd"] = turtle.forward,
	["forward"] = turtle.forward,
	["forwards"] = turtle.forward,
	["bk"] = turtle.back,
	["back"] = turtle.back,
	["up"] = turtle.up,
	["dn"] = turtle.down,
	["down"] = turtle.down,
	["lt"] = turtle.turnLeft,
	["left"] = turtle.turnLeft,
	["rt"] = turtle.turnRight,
	["right"] = turtle.turnRight,
}

local nArg = 1
-- a_
 waitMehtod( {"space"}, function () 

while nArg <= #tArgs do
	local sDirection = tArgs[nArg]
	local nDistance = 1
	if nArg < #tArgs then
		local num = tonumber( tArgs[nArg + 1] )
		if num then
			nDistance = num
			nArg = nArg + 1
		end
	end
	nArg = nArg + 1

	local fnHandler = tHandlers[string.lower(sDirection)]
	if fnHandler then 
		while nDistance > 0 do
			    while turtle.dig() do end
			     while turtle.digUp() do end
			if   fnHandler() then
				nDistance = nDistance - 1
			elseif turtle.getFuelLevel() == 0 then
				print( "Out of fuel" )
				return
			else
				sleep(0.5)
			end
		end
	else
		print( "No such direction: "..sDirection )
		print( "Try: forward, back, up, down" )
		return
	end

end

end )