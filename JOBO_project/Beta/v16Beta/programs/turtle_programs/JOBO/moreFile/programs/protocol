

local computerID;
local DefoultProtocol

function updateMangerID( ... )
	-- body
	if fs.exists ("programs/tbLib") then 
	os.loadAPI("programs/tbLib")
	os.loadAPI("config/source/ConfigProgram")
	computerID = ConfigProgram.GET["SuperComputerID"]()
		else
	os.loadAPI("/moreFile/programs/tbLib")
	os.loadAPI("/moreFile/programs/config/source/defaultProgramT")
	computerID = defaultProgramT.GET["ManagerID"]()
	end 
-- Update full inforamtion
DefoultProtocol = {
				Manager = computerID
}
end
	updateMangerID( ... )
-- print ("MANAGER: "..tostring(computerID))
-- sleep(30)



local function ProtocolNew(  protocol,data  )--Constructor -- data if needet  
	assert (type(protocol)=="table","Requare merge protocol")
	local protocol =  tbLib.merge(protocol,DefoultProtocol)
	return  tbLib.merge(data,protocol) 
end



function SET_GoHome(  ) -- Broadcast protocols about Go home 
	return ProtocolNew(  {protocol="GoHome"}  ) -- send information to shutdown
end

function SET_StoreJob( Coordination )
 	assert (type(Coordination)=="table", "Requare Coordination to ExecuteJob")
 	return ProtocolNew({protocol="StoreJob"},  Coordination)
end


function SET_Disassemble( Coordination )
 	 return ProtocolNew(  {protocol="Disassemble"} , Coordination )
 end 

 function SET_ExecuteJob( Coordination )
 	assert (type(Coordination)=="table", "Requare Coordination to ExecuteJob")
 	 return ProtocolNew(  {protocol="ExecuteJob"} , Coordination  )
 end

function SET_CompleteJob( Coordination ) -- if job not jomplete the execute not complete job 
 	 return ProtocolNew(  {protocol="CompleteJob"}   )
 end

function SET_ManagerGetStatus( Coordination ) -- just for more controlc and stability to check fuel
	return  ProtocolNew(  {protocol="ManagerGetStatus"},Coordination  )
end

function SET_Connected(  )-- for update where is connected
	return  ProtocolNew(  {protocol="Connected"}  )
end

function SET_SetJob( Coordination )
	assert(type(Coordination)=="table", "SET_SetJob need Coordination.")
	return ProtocolNew(  {protocol="SetJob"},Coordination  )
end


-- Check if same protocol

function CHECK_GoHome( instruction,Manager )
	if type (instruction)== "table" then  -- bug , random send whithout statement
		  if  instruction.protocol == "GoHome" and Manager == instruction.Manager	 then 
			     print (">>ProtocolGoHome<<")
			     turtleLib.Broadcast( instruction ) -- send information to shutdown
		         return true 
		  end
	    end 	   	  
  return false
end


function CHECK_StoreJob( instruction,Manager )
	 if type (instruction)== "table" then  -- bug , random send whithout statement
		 if  instruction.protocol == "StoreJob" and Manager == instruction.Manager then 
		         print (">>>>>>>>Protocol StoreJob<<<<<<<<<<")
		         return true 
		  end
	    end 	 
 return  false
end 


function CHECK_Disassemble( instruction,Manager ) -- Going to disasablling  
	   if type (instruction)== "table" then  -- bug , random send whithout statement
		  if  instruction.protocol == "Disassemble" and Manager == instruction.Manager then 
			     print (">>ProtocolDisassemble<<")
		         return true 
		  end
	    end 	   	  
  return false  
end



function CHECK_ExecuteJob( instruction,Manager ) -- Going to disasablling  
	   if type (instruction)== "table" then  -- bug , random send whithout statement
		 if  instruction.protocol =="ExecuteJob"   and  Manager == instruction.Manager  then 			  
		         print (">>>>>ProtocolExecuteJob<<<<< ")
			         return true 
   		 end 
   	 end 	   	  
  return false  
end


function CHECK_Connected( instruction,Manager )
	if type(instruction)== "table" then 
		if instruction.protocol=="Connected" and Manager == instruction.Manager then 
			print (">>>ProtocolConnected<<<")
 		    
			return true 
		end 	
	end 	
end


function CHECK_ManagerGetStatus( instruction,Manager )
	  if type (instruction)== "table" then  -- bug , random send whithout statement
		 if  instruction.protocol == "ManagerGetStatus" and  Manager == instruction.Manager then 
		         return true 
		  end
	    end 	   	  
end 


-- Workd only support 

function SET_Support_MissingItem( MissingItemTb )
	assert(type(MissingItemTb)=="table", "SET_MissingItem need MissingItem value in table.")
	return ProtocolNew(  {protocol="MissingItem"},MissingItemTb  )
end


function CHECK_Support_MissingItem( instruction,Manager )
	  if type (instruction)== "table" then  -- bug , random send whithout statement
		 if  instruction.protocol == "MissingItem" and  Manager == instruction.Manager then 
		         print ">>>>>>Protocol MissingItem <<<<<<<<"
		         return true 
		  end
	    end 	   	  
end 