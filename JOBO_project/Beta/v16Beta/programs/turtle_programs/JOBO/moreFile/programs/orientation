-- Updating file to turtle
local orientations = {['SOUTH'] = 1 , ['WEST'] = 2 , ['NORTH'] =3  , ['EAST']=4 };
local orientationsName =  {[1]='SOUTH' ,[2]='WEST' ,[3]='NORTH'  ,[4]='EAST' };
--Core
local function byName( orientation,to_value ) -- reutun by 'West' name value
assert (orientation == "SOUTH" or orientation == "WEST" or orientation == "NORTH" or orientation == "EAST","byName:Requare:SOUTH,WEST,NORTH,EAST" )
local orientation = orientations[orientation];
local to_value = to_value or 1
assert (type(to_value)=="number","to_value requare number.")

local xTo = {0 , -to_value , 0 , to_value};
local zTo = {to_value , 0 , -to_value , 0} ;

		
	-- print ("x: ",xTo[orientation]," z: ",zTo[orientation])
	-- print ("My orientations is: ",orientation)
			-->1. x             -->>2.z
	return xTo[orientation] , zTo[orientation]
end


--Core
local function byValue( f_value,to_value ) -- return by f value
	assert (f_value == 1 or f_value == 2 or f_value == 3 or f_value == 4,"byValue: Requare facing value: 1,2,3,4." )
	local orientation = f_value
	local to_value = to_value or 1
	assert (type(to_value)=="number","to_value requare number.")
	local xTo = {0 , -to_value , 0 , to_value};
	local zTo = {to_value , 0 , -to_value , 0} ;
	return xTo[orientation] , zTo[orientation]
end


function toNameOrientation( orientation )
assert (orientation == 1 or orientation == 2 or orientation == 3 or orientation == 4,"toNameOrientation:Requare:1,2,3,4 got "..tostring(orientation) )
	return orientationsName[orientation]
end



function fromNumberOrientation(orientation )
assert (orientation == "SOUTH" or orientation == "WEST" or orientation == "NORTH" or orientation == "EAST","fromNumberOrientation:Requare:SOUTH,WEST,NORTH,EAST" )
	return orientations[orientation]
end

--Core
-- turn
local function turn(orientation, value )
assert (orientation == 1 or orientation == 2 or orientation == 3 or orientation == 4 or
orientation == "SOUTH" or orientation == "WEST" or orientation == "NORTH" or orientation == "EAST"	, "turn:Requare SOUTH,WEST NORTH EAST or 1, 2, 3, 4 facing got:"..tostring(orientation))
assert (type(value)== "number" and math.abs(value)<=4 , "turn:Requare value between 1 4 or -1 -4 for turn times.")	
local f;
if type(orientation) == "string" then 
	  f =  orientations[orientation]
	  -- print (f)
else 
	  f =  orientation
	  -- print (orientationsName[f])

end 	
-- magic Recipe to turning calculate
 return ( (f + value) % 4 ~= 0 and (f + value) % 4 or 4)	or (f + value) % 4 == 0 and 1
end


----------------------------------------------------------------------------------
-- turn where need go  x forward 

--Return automaticly forward value where was looking
function Left(orientation,forwValue  )
local turned = turn(orientation, -1 ) -- turnLeft
-- print ("turned:",turned)
-- print ("orientation: ",orientationsName[turned].."in Left")
 local x,z=	byValue( turned,forwValue )
	return x , z
end


--Return automaticly forward value where was looking
function Right( orientation,forwValue )
local turned = turn(orientation, 1 ) -- > turnRight
-- print ("turned:",turned)
-- print ("orientation: ",orientationsName[turned].." in Right")
 local x,z=	byValue( turned,forwValue )
	return x , z
end


function Back(orientation,forwValue  )
local turned = turn(orientation, -2 ) -- turnLeft turnLeft
-- print ("turned:",turned)
-- print ("orientation: ",orientationsName[turned].." in Back")
 local x,z=	byValue( turned,forwValue )
	return x , z
end


--Return automaticly forward value where was looking
function Front( orientation,forwValue )
local turned = turn(orientation, 0 ) -- style point :P -- > turn 0
-- print ("turned:",turned)
-- print ("orientation: ",orientationsName[turned].." in Front.")
 local x,z=	byValue( turned,forwValue )
	return x , z
end



-- just turn 

function turnLeft( orientation )
-- print ("turnLeft: "..orientationsName[turn(orientation, -1 ) ])
return  turn(orientation, -1 ) 
end 


function turnRight( orientation )
-- print ("turnRight: "..orientationsName[turn(orientation, 1 ) ])

return turn(orientation, 1 ) -- turnLeft turnLeft
end



function turnBack( orientation )
return  turn(orientation, -2 ) -- turnLeft turnLeft
end



function turnFront( orientation )
return  turn(orientation, 0 ) -- turnLeft turnLeft
end