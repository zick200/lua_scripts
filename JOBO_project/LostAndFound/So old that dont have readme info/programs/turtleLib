
-- Wsith betwen child Location from Manager
if fs.exists("/programs/Require_Items/source/requestAPI") then 
  --  print "turtleLib:Loading to Manager...??"
    os.loadAPI("/programs/Require_Items/source/requestAPI")
elseif fs.exists("/moreFile/programs/config/source/FileLibrary/requestAPI") then 
	--print "turtleLib:Loading to child..."
	os.loadAPI("/moreFile/programs/config/source/FileLibrary/requestAPI")
end 


local turtleArray = {"ComputerCraft:CC-Turtle" ,"ComputerCraft:CC-TurtleAdvanced","ComputerCraft:CC-TurtleExpanded"} 

function isTurtle(  ) -- chesk if Turtle in inventory
	for slot = 1, 16 do 
		 if requestAPI.isListedRequest( requestAPI.getDataName (slot) , turtleArray ) then 
	     return true 
	     end 
	end
return false
end


function Count(  ) -- countTurtles
local c = 0
	for slot = 1, 16 do 
		 if requestAPI.isListedRequest( requestAPI.getDataName (slot) , turtleArray ) then 
	      c = c + turtle.getItemCount(slot)
	     end 
	end
return c
end 


function Send(id ,arg ) -- send Data
	assert(type(id)=="number","Send:Requare id where to send.")
	assert (type (arg) == "table","Send:Requre table to serialize")
	--print ("Sending")
	rednet.send(id, textutils.serialize(arg))
end

function Broadcast( arg )
	assert (type (arg) == "table","broadcast:Requre table to serialize")
	rednet.broadcast( textutils.serialize(arg))
end

function Receive( time )
	  if time then 
	  assert(type(time)== "number", "Receive:Requre time value.")
	  end 

	local sender,message,_ =rednet.receive(time)

	if message ~= nil then 
		local tb = textutils.unserialize(message)
		for k,v in pairs( tb) do
			print(tostring (k).."="..tostring(v))
		end
	return sender , tb
	else print "Message:nil" 

	end 	
 return false 
end